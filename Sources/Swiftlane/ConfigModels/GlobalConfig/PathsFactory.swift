//

import Foundation
import SwiftlaneCore

public protocol PathsFactoring {
    /// Path to `.json` report generated by xclogparser.
    /// Generated by Guardian.
    /// Parsed by Guardian.
    var xclogparserJSONReport: AbsolutePath { get }

    var xclogparserHTMLReportDir: AbsolutePath { get }

    /// Merged `.junit` file.
    /// Produced after running tests.
    /// Used by Guardian.
    var mergedJUnit: AbsolutePath { get }

    /// Merged `.xcresult` file.
    /// Produced after running tests.
    /// Used by Guardian.
    var mergedXCResult: AbsolutePath { get }

    /// Code coverage by target.
    /// Generated by `xccov` after build.
    /// Parsed by Guardian.
    var xccovFile: AbsolutePath { get }

    /// Path to `.xcodeproj` file.
    var projectFile: AbsolutePath { get }

    /// Path to derived data.
    var derivedDataDir: AbsolutePath { get }

    /// Path to root of few derived data dirs produced after running MultiScan.
    var testRunsDerivedDataDir: AbsolutePath { get }

    /// Root dir where all logs are generated during building, testing and other operations.
    var logsDir: AbsolutePath { get }

    /// Root dir where results of building and testing are stored.
    /// e.g. `.junit`, `.xcresult` files.
    var resultsDir: AbsolutePath { get }

    /// Root dir where to store .xcarchive's and exported .ipa's.
    var archivesDir: AbsolutePath { get }

    /// Path `.swiftlint.yml` file.
    /// Used by Guardian.
    var swiftlintConfig: AbsolutePath { get }

    /// Path to directory with `.json` files with known swiftlint warnings.
    /// Used by Guardian.
    var warningsJsonsDir: AbsolutePath { get }

    /// Path to cloned repo with certificates.
    var tempDir: AbsolutePath { get }

    var xcodebuildFormatterPath: AbsolutePath { get }
}

public struct PathsFactory: PathsFactoring {
    private let pathsConfig: PathsConfig
    private let projectDir: AbsolutePath
    private let filesManager: FSManaging
    private let logger: Logging

    public init(
        pathsConfig: PathsConfig,
        projectDir: AbsolutePath,
        filesManager: FSManaging,
        logger: Logging
    ) {
        self.pathsConfig = pathsConfig
        self.projectDir = projectDir
        self.filesManager = filesManager
        self.logger = logger
    }

    public var xclogparserJSONReport: AbsolutePath {
        resultsDir.appending(path: pathsConfig.xclogparserJSONReportName)
    }

    public var xclogparserHTMLReportDir: AbsolutePath {
        resultsDir.appending(path: pathsConfig.xclogparserHTMLReportDirName)
    }

    public var mergedJUnit: AbsolutePath {
        resultsDir.appending(path: pathsConfig.mergedJUnitName)
    }

    public var mergedXCResult: AbsolutePath {
        let name = pathsConfig.mergedXCResultName
            ?? (try! RelativePath("merged_\(Date().full_custom).xcresult"))
        return resultsDir.appending(path: name)
    }

    public var xccovFile: AbsolutePath {
        resultsDir.appending(path: pathsConfig.xccovFileName)
    }

    public var projectFile: AbsolutePath {
        projectDir.appending(path: pathsConfig.projectFile)
    }

    public var derivedDataDir: AbsolutePath {
        pathsConfig.derivedDataDir.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var testRunsDerivedDataDir: AbsolutePath {
        pathsConfig.testRunsDerivedDataDir.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var logsDir: AbsolutePath {
        pathsConfig.logsDir.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var resultsDir: AbsolutePath {
        pathsConfig.resultsDir.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var archivesDir: AbsolutePath {
        pathsConfig.archivesDir.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var swiftlintConfig: AbsolutePath {
        pathsConfig.swiftlintConfigPath.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var warningsJsonsDir: AbsolutePath {
        pathsConfig.swiftlintWarningsJsonsFolder.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var tempDir: AbsolutePath {
        pathsConfig.tempDir.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }

    public var xcodebuildFormatterPath: AbsolutePath {
        pathsConfig.xcodebuildFormatterPath.makeAbsoluteIfIsnt(relativeTo: projectDir)
    }
}
